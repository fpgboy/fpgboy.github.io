[{"title":"在Docker Desktop安装Hadoop(借用镜像)","date":"2021-11-02T16:00:00.000Z","path":"2021/11/03/在Docker Desktop安装Hadoop(借用镜像)/","text":"在Docker Desktop安装Hadoop(借用镜像)前提条件windows系统为专业版 Linux子系统为wsl2 Docker20.10.8 安装步骤首先将此项目克隆到本地（克隆地址没有要求只要自己可以找到即可），项目地址如下 https://github.com/kiwenlau/hadoop-cluster-docker 拉取镜像（若拉取时的速度过慢可进行换源） 1docker pull kiwenlau/hadoop:1.0 搭建网桥 1docker network create --driver=bridge hadoop 修改所克隆项目文件夹中的start-container.sh文件，添加两个从机的端口映射，注意在windows中要将所有语句前的的sudo去掉 在git bash中进入我们所克隆的hadoop-cluster-docker文件夹路径下，运行此指令执行脚本 1./start-container.sh 执行成功后，我们及进入了hadoop的master机中 进行ls操作我们即可查看当前文件列表如下 运行start-hadoop.sh 1./start-hadoop.sh 随后在浏览器访问本地相应端口即可"},{"title":"Docker学习","date":"2021-11-02T16:00:00.000Z","path":"2021/11/03/Docker命令学习/","text":"Docker命令学习镜像命令Docker images 查看所有本主机上的镜像 1234567891011C:\\Users\\30277&gt;docker images #进行查看后会出现以下类别的信息#解释REPOSITORY 镜像的仓库源TAG 镜像的标签IMAGE ID 镜像的IDCREATED 镜像的创建时间SIZE 镜像的大小#可选项 -a, --all 展列所有的镜像 -q, --quiet 只展现镜像的ID docker search搜索镜像 12345678910C:\\Users\\30277&gt;docker search hadoop#界面会出现 被搜索镜像的 NAME 等数项信息#可选项Options: -f, --filter filter Filter output based on conditions provided --format string Pretty-print search using a Go template --limit int Max number of search results (default 25) --no-trunc Don&#x27;t truncate output 例：查询收藏超过500的hadoop语句docker search hadoop --filter=STARS=500 docker pull 下载镜像 123456789101112C:\\Users\\30277&gt;docker pull ***#默认下载最新版#可选项Options: -a, --all-tags Download all tagged images in the repository --disable-content-trust Skip image verification (default true) --platform string Set platform if server is multi-platform capable -q, --quiet Suppress verbose output #例：下载固定版本的mysql C:\\Users\\30277&gt;docker pull mysql:5.7 docker rmi 删除镜像，容器ID可以为多个 1234567C:\\Users\\30277&gt;docker rmi -f feb5d9fea6a5#可选项-f 强制删除#与嵌套循环使用删除所有的镜像（本人实验windows窗口不可用该命令）C:\\Users\\30277&gt;docker rmi -f $(docker images -a) 容器的命令说明：我们有了镜像后才可以创建容器 使用docker pull命令下载相关镜像 1C:\\Users\\30277&gt;docker pull centos #此处我们以centos为例 新建容器并启动 123456789101112131415161718192021222324252627282930313233docker run [可选参数] image# 参数说明--name=&quot;name&quot; 容器名字 用以区分容器-d 以后台方式运行-it 使用交互方式运行，进入容器查看内容-p 指定容器的端口 -p 8080:8080 -p 主机端口映射到容器端口 -p 容器的端口-p 随机指定端口#示例：运行并进入centos exit为退出容器的命令C:\\Users\\30277&gt;docker run -it centos /bin/bash#可以用exit退出C:\\Users\\30277&gt;docker exit#查看当前正在运行的容器C:\\Users\\30277&gt;docker ps#可选项Options: -a, --all Show all containers (default shows just running) -f, --filter filter Filter output based on conditions provided --format string Pretty-print containers using a Go template -n, --last int Show n last created containers (includes all states) (default -1) -l, --latest Show the latest created container (includes all states) --no-trunc Don&#x27;t truncate output -q, --quiet Only display container IDs -s, --size Display total file sizes 容器退出 12exit #容器退出同时关闭运行Ctrl+p+Q #退出容器但容器仍在后台运行 删除容器 123docker rm 容器ID #删除固定ID的容器docker rm -f $(docker ps -aq) #删除所有的容器(windows端不可应用)docker ps -a -qxargs docker rm #删除所有的容器 启动和停止容器 1234docker start 容器ID #启动容器docker restart 容器ID #重启容器docker stop 容器ID #停止当前正在运行的容器docker kill 容器ID #强制停止容器 常用的其它命令后台启动容器 12345#命令docker run -d 镜像名 后台运行应用C:\\Users\\30277&gt;docker run -d centos#问题：发现自己并没有将这个镜像启动#解答：docker容器使用后台运行，就必须要有一个前台进程，docker 发现没有应用就会自动停止 查看日志 1234567891011121314docker logs -f --tail 日志数目 容器ID #可选项Options: --details Show extra details provided to logs -f, --follow Follow log output --since string Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes) -n, --tail string Number of lines to show from the end of the logs (default &quot;all&quot;) -t, --timestamps Show timestamps --until string Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes) 查看容器中进程信息 1234docker top 容器ID#UID PID PPID等UID PID PPID C STIME TTY TIME CMDroot 1554 1534 0 07:25 ? 00:00:00 /bin/sh -c while true;do echo kkk;sleep 1;doneroot 1608 1554 0 07:25 ? 00:00:00 /usr/bin/coreutils --coreutils-prog-shebang=sleep /u 查看一个容器的元数据 1234567docker inspect 容器ID#可选项Options: -f, --format string Format the output using the given Go template -s, --size Display total file sizes if the type is container --type string Return JSON for specified type 进入当前正在运行的容器 12345678910#我们通常容器都是使用后台方式运行的，进入运行容器的命令#方法一docker exec -it 容器ID /bin/bash#方法二docker attach 容器ID#两者的区别docker exec #进入容器后开启一个新的终端，可以在当前shell进行操作docker attach#进入容器正在执行的终端，不会启动新的进程 从容器内拷贝文件到主机上 123docker cp 容器ID：容器内路径 目的的主机命令#复制容器25293d031dce中的jj.java到本地的D盘中名为1的文件夹C:\\Users\\30277&gt;docker cp 25293d031dce:/home/jj.java D:/1 例子一：部署nginx 12345docker pull nginx #先去官网拉取镜像-d #后台运行--name #给容器命名-p #宿主机端口：容器内部端口docker run -d --name nginx01 -p 3344:80 nginx #将本机3344端口与nginx容器的端口80相关联 例子二：部署tomcat 12345678910#官方的使用,一般用来测试用完之后就被系统删除了docker run -it --rm tomcat:9.0#一步一步来的话为docker pull tomcatdocker run -d -p 3355:8080 --name tomcat01 tomcatdocker exec -it tomcat01 /bin/bash#webapps文件为空，默认为阉割版#可以将webapps.dist中的东西拷贝到当前的webapps文件夹中，刷新界面即可cp -r webapps.dist/* webapps"},{"title":"Ubuntu设置","date":"2021-11-02T16:00:00.000Z","path":"2021/11/03/Ubuntu设置教程/","text":"Ubuntu设置教程1.对apt链接库进行更新： 1sudo apt update 2.对su账号的密码进行修改 1sudo passwd root 3.设置Ubuntu的语言格式，将语言设置为zh_CN.UTF-8 12dpkg-reconfigure locales (在管理员su账号下)sudo dpkg-reconfigure locales （用户账号） 4.在控制台中使用wsl命令可以直接对Ubuntu子系统进行一些相关操作 123wsl #打开子系统wsl --shutdown #立即终止所有运行的分发及WSL2轻型工具虚拟机wsl --help #打开帮助，忘记命令时可用 5.安装x system图形化界面系统,已经进行了apt库的更新 123sudo apt install xorg #底端服务sudo apt install xfce4 #一个轻量级的桌面sudo apt install xrdp #远程服务 6.对端口进行配置，由于我们使用子系统模式，Linux系统的远程端口与主机一致，因此要进行相关修改,建议改为3390 1sudo vi /etc/xrdp/xrdp.ini 7.设置远程桌面连接，向xsession中写入xfce4-session（注意此项需要为你想要进行远程连接的账号的登录状态，若为root账号登陆则会更改root用户目录下的xsession文件，~号为当前登录账号的文件目录） 1sudo echo xfce4-session &gt;~/.xsession 8.进行xrdp服务的重启(未进行特殊设置的话，在每次启动子系统时都要重启一遍服务后才能进行远程连接) 1sudo service xrdp restart 附： 若wsl的版本为1，则可以下载相关配件来进行版本的切换。"}]